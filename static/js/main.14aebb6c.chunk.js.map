{"version":3,"sources":["components/Chart/InfoCard/InfoCard.js","components/Chart/Chart.js","App.js","serviceWorker.js","index.js"],"names":["dynamicObj","DAYS_IN_MONTHS","InfoCard","props","currDynamic","currValue","lastCurrValue","react_default","a","createElement","className","style","position","top","concat","y","left","x","daysNumber","month","day","days","i","length","getDate","currency","LEFT_OFFSET","DAYS_IN_YEAR","reduce","res","elem","UNITS_PER_POINT","width","_translateCoord","coord","maxYValue","verticalField","height","coordsToPath","coords","result","Chart","state","showInfoCard","spaceBetweenYBreakpoints","_getNearestXPoint","data","guess","min","max","xCoord","_this","Math","floor","undefined","mousemoveHandler","e","rect","refs","svgChart","getBoundingClientRect","svgWindowLeftOffset","svgWindowTopOffset","newState","Object","objectSpread","clientX","clientY","setState","mouseleaveHandler","this","forEach","crutchVerticalField","ceil","sections","separator","monthsWidth","yScaleItems","linesIntoChart","push","key","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","daysOffset","xScaleItems","map","dotIndex","translatedDot","infoCard","Chart_InfoCard_InfoCard","ref","onMouseMove","onMouseLeave","d","fill","cx","cy","r","Component","App","random","components_Chart_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14aebb6c.chunk.js","sourcesContent":["import React from 'react';\nimport './InfoCard.css'\n\nconst dynamicObj = {\n    down: '▼',\n    up: '▲'\n};\n\nconst DAYS_IN_MONTHS = [31, 28, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30];\n\nconst getDate = daysNumber => {\n    if (daysNumber > 366 || daysNumber < 1) return null;\n    let days = 0;\n    let month;\n    let day;\n    for (let i = 0; i < DAYS_IN_MONTHS.length; i++) {\n        if (daysNumber - days < DAYS_IN_MONTHS[i]) {\n            if (daysNumber - days === 0) {\n                day = DAYS_IN_MONTHS[i-1];\n                month = i - 1;\n            } else {\n                month = i;\n                day = daysNumber - days;\n            }\n            break;\n        }\n        days += DAYS_IN_MONTHS[i];\n    }\n    return `${day < 10 ? \"0\" : \"\"}${day}.${month + 1 < 10 ? \"0\" : \"\"}${month + 1}.2015`\n};\n\nconst InfoCard = props => {\n    const currDynamic = props.currValue > props.lastCurrValue;\n\n    return (\n        <div className='info-card' style={{position: 'absolute', top: `${+props.y - 55}px`, left: `${+props.x + 20}px`}}>\n            <p className='info-card__date'>{getDate(+props.days)}</p>\n            <div className='info-card__currency-rate'>\n                <span className='info-card__currency'>{props.currency}</span>\n                <p className='info-card__currency-value'>{props.currValue}</p>\n                <div className='info-card__currency-dynamic-wrap'>\n                    <span className={`info-card__currency-dynamic info-card__currency-dynamic${currDynamic ? \"_up\" : \"_down\"}`}>\n                        {currDynamic ? dynamicObj.up : dynamicObj.down}\n                    </span>\n                    <p className={`info-card__currency-dynamic info-card__currency-dynamic${currDynamic ? \"_up\" : \"_down\"}`}>\n                        {currDynamic ? props.currValue - props.lastCurrValue : props.lastCurrValue - props.currValue}\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default InfoCard;\n\n","import React, { Component } from 'react';\nimport './Chart.css';\nimport InfoCard from './InfoCard/InfoCard.js';\n\n\n// left offset to fit numbers\nconst LEFT_OFFSET = 30;\n// bottom offset to fit month names\nconst BOTTOM_OFFSET = 30;\nconst SPACE_BETWEEN_Y_BREAKPOINTS = 30;\n\n\n// amount days in one month\nconst DAYS_IN_MONTHS = [31, 28, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30];\nconst DAYS_IN_YEAR = DAYS_IN_MONTHS.reduce((res,elem) => res + elem);\n\nconst UNITS_PER_POINT = 2;\n\n// ideal parameters\nconst width = LEFT_OFFSET + DAYS_IN_YEAR * UNITS_PER_POINT + 10;\nconst height = 160;\n\n\n// verticalField = full height of svg - bottom offset - space above largest num\nconst verticalField = height - BOTTOM_OFFSET - 10;\n\n// translate coordinates to svg points\nconst _translateCoord = (coord, maxYValue) => {\n    return [+coord[0] * UNITS_PER_POINT + LEFT_OFFSET, (verticalField + 10) - verticalField/maxYValue*(+coord[1])]\n};\n\nconst translateCoords = (coords, maxYValue) => {\n    return coords.map(elem => _translateCoord(elem, maxYValue))\n};\n\n// generate 'd' attr of path svg\nconst coordsToPath = coords => {\n    let result = ``;\n    result += `M${coords[0][0]},${coords[0][1]} `;\n    for (let i = 1; i < coords.length; i++) {\n        result += `L${coords[i][0]},${coords[i][1]} `;\n    }\n    return result;\n};\n\nclass Chart extends Component {\n    state = {\n        x: 0,\n        y: 0,\n        showInfoCard: false,\n        maxYValue: null,\n        spaceBetweenYBreakpoints: 30,\n    };\n\n    // when mouse is on chart we need to get the nearest data point using binary search\n    _getNearestXPoint = data => {\n        var guess,\n            min = 0,\n            max = data.length - 1,\n            xCoord = this.state.x - LEFT_OFFSET;\n\n        while(min - max !== 1){\n            guess = Math.floor((min + max) / 2);\n\n            if(data[guess][0] * UNITS_PER_POINT === xCoord)\n                return guess;\n            else if(data[guess][0] * UNITS_PER_POINT < xCoord)\n                min = guess + 1;\n            else\n                max = guess - 1;\n        }\n\n        // This could happen when we are on the first element\n        if (data[min - 1] === undefined) {\n            return min;\n            // This could happen when we are on the fast element\n        } else if (data[min] === undefined) {\n            return min - 1;\n        } else if (xCoord - data[min - 1][0] * UNITS_PER_POINT < data[min][0] * UNITS_PER_POINT - xCoord) {\n            return min - 1;\n        }\n        return min;\n    };\n\n    componentDidMount() {\n        let max = 0;\n        this.props.data.forEach(elem => {\n            if (elem[1] > max) {\n                max = elem[1];\n            }\n        });\n        const crutchVerticalField = Math.ceil(verticalField/SPACE_BETWEEN_Y_BREAKPOINTS) * SPACE_BETWEEN_Y_BREAKPOINTS\n        const sections = Math.ceil(crutchVerticalField / SPACE_BETWEEN_Y_BREAKPOINTS);\n        const separator = Math.ceil(max / sections / 10) * 10;\n        this.setState({\n            ...this.state,\n            sections: sections,\n            separator: separator,\n            maxYValue: separator * sections,\n        });\n    }\n\n    mousemoveHandler = e => {\n        const rect = this.refs.svgChart.getBoundingClientRect();\n        const svgWindowLeftOffset = rect.x;\n        const svgWindowTopOffset = rect.y;\n        const newState = {...this.state};\n        newState.x = e.clientX - svgWindowLeftOffset;\n        newState.y = e.clientY - svgWindowTopOffset;\n        newState.showInfoCard = true;\n        this.setState(newState);\n    };\n\n    mouseleaveHandler = e => {\n        const newState = {...this.state};\n        newState.showInfoCard = false;\n        this.setState(newState);\n    };\n\n    render() {\n        if (this.state.maxYValue === null) return null;\n        const months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];\n        const monthsWidth = [41,49,30,41,22,30,31,38,55,47,43,50];\n\n        const yScaleItems = [];\n        const linesIntoChart = [];\n        // Line amount should be section amount + 1 (i <= section instead of i < section)\n        for (let i = 0; i <= this.state.sections; i++) {\n            // FIXME: generate key that does not depend on 'i'\n            yScaleItems.push(\n                <text key={this.state.separator * i} x='0' y={10 + LEFT_OFFSET * (this.state.sections - i)} className='y-scale__item'>{this.state.separator * i}</text>\n            );\n\n            // FIXME: generate key that does not depend on 'i'\n            linesIntoChart.push(\n                <line key={this.state.separator * i} x1={LEFT_OFFSET} y1={10 + this.state.spaceBetweenYBreakpoints * i} x2={width} y2={10 + this.state.spaceBetweenYBreakpoints * i} style={{stroke: 'lightgrey', strokeWidth: 1}} strokeDasharray='2' />\n            )\n        }\n\n        let daysOffset = LEFT_OFFSET;\n        const xScaleItems = months.map((elem, i) => {\n            if (i !== 0) {\n                daysOffset += DAYS_IN_MONTHS[i] * UNITS_PER_POINT;\n            }\n            return (\n                <text key={elem} x={daysOffset + (DAYS_IN_MONTHS[i] * UNITS_PER_POINT / 2) - (monthsWidth[i] / 2)} y={height - 10} className='x-scale__item'>{elem}</text>\n            )\n        });\n\n        // index of dot in svg chart\n        const dotIndex = this._getNearestXPoint(this.props.data);\n        // translate value to coordinates\n        const translatedDot = _translateCoord(this.props.data[dotIndex], this.state.maxYValue);\n        let infoCard = null;\n        if (this.state.showInfoCard) {\n            infoCard = (<InfoCard\n                days={this.props.data[dotIndex][0]}\n                currValue={this.props.data[dotIndex][1]}\n                currency='$'\n                lastCurrValue={dotIndex !== 0 ? this.props.data[dotIndex - 1][1] : this.props.data[dotIndex][1]}\n                x={translatedDot[0]}\n                y={translatedDot[1]}\n            />);\n        }\n        return (\n            <div className='chart-wrapper'>\n                {infoCard}\n                <svg ref=\"svgChart\" width={width} height={height} onMouseMove={this.mousemoveHandler} onMouseLeave={this.mouseleaveHandler}>\n                    <g className='y-scale'>\n                        {yScaleItems}\n                    </g>\n                    <g className='x-scale'>\n                        {xScaleItems}\n                    </g>\n                    <g className='chart-lines'>\n                        {linesIntoChart}\n                    </g>\n                    <g className='chart'>\n                        <path d={coordsToPath(translateCoords(this.props.data, this.state.maxYValue))} stroke='#2d8ae8' strokeWidth='2' fill='transparent'/>\n                        <g>\n                            <line x1={translatedDot[0]} y1={translatedDot[1]} x2={translatedDot[0]} y2={height - this.state.spaceBetweenYBreakpoints} style={{stroke: 'lightgrey', strokeWidth: 1}} strokeDasharray='2' />\n                            <circle cx={translatedDot[0]} cy={translatedDot[1]} r='3' stroke='#fff' strokeWidth='2' fill='#2d8ae8' />\n                        </g>\n                    </g>\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './components/Chart/Chart';\n\n// coords = [day, dollarValue]\n// const COORDS = [[1, 65], [2, 63], [3, 60], [4, 64], [5, 64], [6, 64], [7, 65], [8, 66], [9, 67], [10, 66], [11, 60], [20, 70], [30, 50], [40, 50], [50, 30], [60, 35], [70, 70], [80, 64], [90, 55], [100, 54], [110, 54], [120, 63], [220, 58], [260, 73], [300, 43], [350, 48], [363, 78]];\n\n\nclass App extends Component {\n    render() {\n        const a = 364;\n        const data = [];\n        for (let i = 1; i < a; i += 10) {\n            data.push([i, Math.floor(Math.random() * 80)])\n        }\n\n        return (\n            <div className='App'>\n                <Chart data={data} />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}